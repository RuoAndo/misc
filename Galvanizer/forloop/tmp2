libxl_cpupoolinfo * libxl_list_cpupool(libxl_ctx *ctx, int *nb_pool)
{
    libxl_cpupoolinfo *ptr, *tmp;
    int i;
    xc_cpupoolinfo_t *info;
    uint32_t poolid;

    ptr = NULL;

    poolid = 0;
    for (i = 0;; i++) {
        info = xc_cpupool_getinfo(ctx->xch, poolid);
        if (info == NULL)
            break;
        tmp = realloc(ptr, (i + 1) * sizeof(libxl_cpupoolinfo));
        if (!tmp) {
            LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "allocating cpupool info");
            free(ptr);
            xc_cpupool_infofree(ctx->xch, info);
            return NULL;
        }
        ptr = tmp;
        ptr[i].poolid = info->cpupool_id;
        ptr[i].sched_id = info->sched_id;
        ptr[i].n_dom = info->n_dom;
        if (libxl_cpumap_alloc(ctx, &ptr[i].cpumap)) {
            xc_cpupool_infofree(ctx->xch, info);
            break;
        }
        memcpy(ptr[i].cpumap.map, info->cpumap, ptr[i].cpumap.size);
        poolid = info->cpupool_id + 1;
        xc_cpupool_infofree(ctx->xch, info);
    }

    *nb_pool = i;
    return ptr;
}